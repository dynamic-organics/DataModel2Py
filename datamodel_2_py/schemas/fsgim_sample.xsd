<?xml version="1.0" encoding="UTF-8"?>
<!--W3C XML Schema generated by XMLSpy v2018 rel. 2 (x64) (http://www.altova.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:import namespace="http://www.w3.org/2005/Atom" schemaLocation="atom.xsd"/>
    <xs:annotation>
        <xs:documentation>The Energy Manager Component is the portion of the FSGIM that provides an abstract representation of energy management system functionality. The functionality may be implemented in any device that performs analysis and/or makes energy-related decisions involving meters, loads, generators, or energy storage devices.  The Energy Manager Component includes a representation of information used to make these decisions, including cost, emissions, and other information. The Energy Manager Component also supports tracking historical energy data, projecting future energy demand, and interfacing to third party sources of energy related information such as weather.

            An energy manager fulfills two roles in a facility:

            1. Managing/monitoring the energy aspects of some portion of a facility and
            2. interfacing with entities outside a facility.


            An energy manager that only fulfills the first role is called a "local energy manager" or "local EM." An energy manager that interfaces outside of the facility, regardless of any local energy management functions, is called an "energy services interface energy manager" or "ESI EM."</xs:documentation>
    </xs:annotation>
    <xs:element name="CurtailableLoad" type="CurtailableLoad"/>
    <xs:complexType name="CurtailableLoad">
        <xs:annotation>
            <xs:documentation>The CurtailableLoad class defines the attributes that are unique to devices whose electrical consumption can be curtailed. The attributes define the information needed to represent curtailment policies based on criteria including load priorities, cost constraints, protection of physical equipment, and safety considerations. The CurtailableLoad class also provides attributes for restoration of curtailed loads.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="Load">
                <xs:sequence>
                    <xs:element name="actualCurtailedDemand" type="PowerMeasurementsSet" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the amount of demand presently curtailed for this load (as measured by the present subinterval demand) as measured within the PowerMeasurementsSet for this load.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="curtailmentCost" type="xs:float" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the monetary value of the fixed and variable cost associated with curtailing the load (when positive) or the savings associated by curtailing the load (when negative) on a per unit of power basis.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="curtailmentCyclesInPeriod" type="xs:integer" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the number of times the load has been curtailed since this attribute was last reset. This attribute shall be increased by one each time a two-state load is curtailed, or a multi-state load is curtailed from one curtailment state to another.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="curtailmentRatingsLevel" type="CurtailmentArrayElement" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the array of curtailment amounts when the requestedCurtailmentLevel.signalType equals 'level'.  This array transforms the level requested by the Energy Manager as specified by the attribute requestedCurtailmentLevel.level into the fixed demand to which the load shall be controlled.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="curtailmentStatus" type="CurtailmentStatusType" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute indicates whether the load is presently curtailed and, if curtailed, is in compliance with the curtailment request received.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="eligibleCurtailableDemand" type="PowerMeasurementsSet" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the amount of load still eligible to be curtailed for two-state and multi-state curtailable loads.
                                For two-state loads this value will either be the value of maximumLoad as defined in the Load class or zero depending on whether the load is presently curtailed. For multi-state curtailable loads this value is the total remaining load that can be curtailed as defined in the curtailmentRatings attribute.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="lastCurtailmentDateTime" type="UTCDateTime" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the date and time on which the load was last curtailed.  For multistage curtailable loads, each time a multistage curtailable load is curtailed, this attribute shall be updated.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="maximumCurtailableDemand" type="PowerMeasurementsSet" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the maximum amount of demand curtailable for this load as measured in PowerMeasurementsSet.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="maximumCurtailmentsCyclesInPeriod" type="xs:integer" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the maximum number of times this load may be curtailed within the specified period. When the curtailmentCyclesInPeriod reaches this attribute's value, the loadStatus attribute will be set to maxCyclesThisPeriod rendering the load ineligible for curtailment until the period information is reset.   The duration of the period and the resetting of this attribute is a local matter.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="maximumCurtailTime" type="xs:duration" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute specifies the maximum number of seconds that a load may be curtailed before it shall be released from its curtailment state.   This duration is often used to maintain comfort levels, or meet safety code requirements.  It is used to set the queueTimeRemaining attribute when placing the load in the maxCurtailQueue state. </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="minimumCurtailTime" type="xs:duration" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute specifies the minimum number of seconds that a load shall be curtailed before it may be released from its curtailment state. This duration is used to protect the load's hardware from excess cycling. However, it may also be used to maintain comfort levels, or meet safety code requirements.
                                It is used to set the QueueTimeRemaining attribute when placing the load in the minCurtailQueue state.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="overridden" type="xs:boolean" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute is typically controlled by an external entity to affect eligibility of the load. For example, an Energy Manager may override this load if the present price of energy is falls within a defined economic threshold. If the present price of energy exceeds the threshold, the Energy Manager might toggle this attribute to allow the load to be curtailed.
                                This attribute differs from the loadLocked attribute in that this attribute is meant to be connected to an automation system and only persists while the override is in effect. The loadLocked attribute persists indefinitely and meant to be set by manual intervention.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="priceThreshold" type="xs:float" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the marginal operational cost per unit of power basis for this load.  The priority is not created within the load; this is a placeholder for the Energy Manager. </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="priority" type="xs:float" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the curtailment priority which defines the order upon which curtailment occurs across a set of loads.  A priority value of 1 is considered a critical load that may not be shed except during a critical event.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="queueTimeRemaining" type="xs:duration" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute specifies the duration that a controlled load has been on a queue. As the load transitions from the minCurtailQueue to the maxCurtailQueue and the releaseQueue this attribute is set to its maximum extent upon entry in the queue and counts down to zero on the queue when it transitions off the queue.  This attribute should be updated at least once each 60 seconds.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="releaseTime" type="xs:duration" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute specifies the number of seconds that a load shall be released from curtailment before it is again eligible for curtailment. This duration is used to protect the load's hardware from excess cycling.  However, it may also be used to restore comfort levels, or meet safety code requirements. It is used to set the queueTimeRemaining attribute when placing the load in the releaseQueue state.
                                If this attribute is not present, the releaseTime shall be considered to be zero (0) and immediately become available for curtailment.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="requestedCurtailmentLevel" type="FSGIMEventSignalType" minOccurs="1" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the demand level the Energy Manager is requesting the load to operate.  The request by the Energy Manager is always a curtailment amount; however, the load will compare this curtailment requested amount to the present demand of the load and may then a) curtail it more, b) restore it more or c) leave the load at its present demand state.

                                The request is made in one of four ways defined by the value requestedCurtailmentLevel.signalType :

                                1)  When the requestedCurtailmentLevel.signalType attribute is set to 'setpoint', the requestedCurtailmentLevel.currentValue attribute describes the fixed amount of demand to which the load should operate. currentValue must be a positive number or zero. The currentValue is compared against the actualCurtailableAmount and maximumCurtailmentAmount to determine the curtailment or restoration needed to meet the request.
                                a) If currentValue equals the actualCurtailedAmount, no further curtailment or restoration will occur. The curtailmentStatus will be set to curtailmentCompliant.
                                b)  If currentValue is less than the actualCurtailedAmount, then if the load has surpassed its minCurtailTime but has not yet reached the maxCurtailTime, the load will be considered for early release.  The load may be released in its entirety for a two-state load or partially for a multistate load until the actualCurtailedAmount reaches currentValue's value. If the load cannot be released to exactly match the request, the load will be released as close as possible as it can be released without exceeding the request. The curtailmentStatus will remain as curtailmentCompliant.
                                c)  If currentValue is greater than the actualCurtailedAmount, the load may be further curtailed as possible upwards to the maximumCurtailmentAmount. The curtailmentStatus attribute will then be adjusted to reflect whether the curtailment is curtailmentCompliant or curtailmentNoncompliant.
                                d)  If currentValue is greater than the maximumCurtailableAmount, the load will be completely curtailed and the curtailmentStatus will be set to curtailmentNoncompliant.
                                Stated mathematically,
                                assure
                                0 &lt;= currentValue &lt;= maximumCurtailmentAmount
                                And if
                                currentValue &gt;= actualCurtailableAmount; amount to curtail = currentValue - actualCurtailableAmount
                                else if
                                currentValue &lt; actualCurtailableAmount; amount to restore = actualCurtailableAmount - currentValue.


                                2) When the requestedCurtailmentLevel.signalType attribute is set to 'delta', the requestedCurtailmentLevel.currentValue attribute describes the relative amount of demand to which the load should be adjusted. currentValue may be a positive or negative number. The sum of currentValue and actualCurtailedAmount, is compared against zero and maximumCurtailmentAmount to determine if curtailment or restoration is needed to meet the request.
                                a) If the value of currentValue is zero no further curtailment or restoration will occur. The curtailmentStatus will be set to curtailmentCompliant.
                                b)  If currentValue is positive, the load will be further curtailed as possible upwards to the maximumCurtailmentAmount. If the sum of currentValue and actualCurtailedAmount is greater than maximumCurtailmentAmount, the load will be completely curtailed and the curtailmentStatus will be set to curtailmentNoncompliant otherwise it will be set to curtailment Compliant.
                                c)  If currentValue is negative, then if the load has surpassed its minCurtailTime but has not yet reached the maxCurtailTime, the load will be considered for early release.  The load may be released in its entirety for a two-state load or partially for a multistate load until the currentValue value is reached or actualCurtailableAmount is zero. If the sum of currentValue and actualCurtailedAmount is less than zero, the load will be completely released and the curtailmentStatus will be set to curtailmentNoncompliant otherwise it will be set to curtailment Compliant.
                                Stated mathematically,
                                assure
                                0 &lt;= currentValue+ actualCurtailableAmount &lt;= maximumCurtailmentAmount
                                And if
                                currentValue &gt;= 0, amount to curtail = currentValue
                                else if
                                currentValue &lt; 0, amount to restore = currentValue.


                                3) When the requestedCurtailmentLevel.signalType attribute is set to 'multiplier', the requestedCurtailmentLevel.currentValue attribute divided by 100 describes the percentage of the maximumCurtailableAmount value to which the load should be adjusted. currentValue must be a positive number in the range of 0 to 100. The calculated value of product of currentValue/100 and maximumCurtailmentAmount is compared to the actualCurtailedAmount to determine the curtailment or restoration needed to meet the request.
                                a) If this calculated value is equal to actualCurtailedAmount, then no further curtailment or restoration will occur. The curtailmentStatus will be set to curtailmentCompliant.
                                b)  If this calculated value is less the actualCurtailedAmount, then if the load has surpassed its minCurtailTime but has not yet reached the maxCurtailTime the load will be considered for early release.  The load may be released in its entirety for a two-state load or partially for a multistate load until the actualCurtailedAmount reaches the calculated value.. The curtailmentStatus will remain as curtailmentCompliant.
                                c)  If the calculated value is greater than the actualCurtailedAmount, the load will be further curtailed as possible upwards to the maximumCurtailmentAmount. The curtailmentStatus attribute will then be adjusted to reflect whether the curtailment is curtailmentCompliant or curtailmentNoncompliant.
                                Stated mathematically,
                                If
                                (currentValue/100)*maximumCurtailmentAmount &gt;= actualCurtailableAmount; amount to curtail = ((currentValue/100)*maximumCurtailmentAmount) - actualCurtailableAmount
                                else if
                                (currentValue/100)*maximumCurtailmentAmount &lt; actualCurtailableAmount; amount to release = actualCurtailableAmount-((currentValue/100)*maximumCurtailmentAmount)

                                4)  When the requestedCurtailmentLevel.signalType attribute is set to 'level', requestedCurtailmentLevel.currentValue attribute describes the predefined level to which the load will be adjusted. currentValue must be a positive number within the range of 1 to n, where n is defined as the number of entries in the curtailmentRatingsLevel array. When the request is received, the load will adjust its curtailment to the level defined by curtailmentRatingsLevel(currentValue).curtailmentAmount
                                a) If curtailmentAmount equals the actualCurtailedAmount, no further curtailment or restoration will occur. The curtailmentStatus will be set to curtailmentCompliant.
                                b)  If curtailmentAmount is less than the actualCurtailedAmount, then if the load has surpassed its minCurtailTime but has not yet reached the maxCurtailTime, the load will be considered for early release.  The load may be released in its entirety for a two-state load or partially for a multistate load until the actualCurtailedAmount reaches curtailmentAmount's value. The curtailmentStatus will remain as curtailmentCompliant.
                                c)  If curtailmentAmount is greater than the actualCurtailedAmount, the load may be further curtailed as possible upwards to the maximumCurtailmentAmount. The curtailmentStatus attribute will then be adjusted to reflect whether the curtailment is curtailmentCompliant or curtailmentNoncompliant.
                                Stated mathematically,
                                if
                                curtailmentRatingsLevel(currentValue).curtailmentAmount &gt;= actualCurtailableAmount; amount to curtail = curtailmentRatingsLevel(currentValue). - actualCurtailableAmount
                                else if
                                curtailmentRatingsLevel(currentValue).curtailmentAmount &lt; actualCurtailableAmount; amount to release = actualCurtailableAmount -curtailmentRatingsLevel(currentValue).

                                NOTE:  A load that may be curtailed multiple times can be curtailed only when in the eligible, minCurtailQueue or maxCurtailQueue states. Upon additional curtailments, the curtailment timers may or may not be reset as a local matter.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="Load" type="Load"/>
    <xs:complexType name="Load">
        <xs:annotation>
            <xs:documentation>The Load Class is the central class of the Load Component.  It contains, directly through its attributes and indirectly through its associations, the information elements that support the functionality of a load.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="ComponentElement">
                <xs:sequence>
                    <xs:element name="actualDemand" type="PowerMeasurementsSet" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the power being consumed by the device (as measured by the present subinterval demand) at the present time in units specified by PowerMeasurementsSet.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="demandLimits" type="PowerRatings" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>The operational demand characteristics and their associated end points for the load.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="downRamp" type="PowerRampSegmentType" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the reduction in power over time when a load being partially or fully de-energized has a complex load reduction profile. For each element of the Load.downRamp array, the downRamp[n].rate defines the amount of power decrease and the downRamp[n].duration defines the length of time in seconds upon which the decrease is in effect. If the downRamp[n].beginRamp attribute is defined for a ramp segment, this is the initial value of the ramp segment; if it is not present the initial value of the ramp equals the ending value of the previous ramp segment.
                                Although the downRamp attribute name implies that the rise is monotonically decreasing, individual array elements may have slopes less than, greater than, or equal to 0.  However, the overall trend of the function shall be decreasing.
                                The downRamp function shall measure the time from the load being fully energized until the power is completely depleted. If downRamp is not present, the power decrease to 0 shall be instantaneous.
                                When a curtailable load is partially curtailed (less than the maximumCurtailableDemand) and curtailment is increased, the power will decrease starting at n-th downRamp of the sum from 0 to n of the downRamp[n].rate that is closest to the actualCurtailedDemand.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="locked" type="xs:boolean" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines whether the load is locked and therefore ineligible for curtailment; or unlocked and available for curtailment.
                                Load locking behavior changes depending on the load's curtailmentStatus attribute value at the time the load was locked. If the Load.locked attribute is set to TRUE and the:

                                1)  load is not curtailable, the load is immediately locked. The behavior of this operation is a local matter;
                                2)  curtailmentStatus is curtailmentInactive, the load will immediately be locked out from curtailment eligibility;

                                3) curtailmentStatus is curtailmentNoncompliant, the load will cycle to its curtailmentInactive state then immediately be locked out of curtailment eligibility;

                                4) If the CurtailableLoad supports multi-stage curtailment, the load will cycle to its curtailmentInactive state for the present curtailment stage and then be locked out of any further curtailment eligibility.
                                5) curtailmentStatus is curtailmentNoncompliant, the load will cycle to its curtailmentInactive state then immediately be locked out of curtailment eligibility;

                                6) If the CurtailableLoad supports multi-stage curtailment, the load will cycle to its curtailmentInactive state for the present curtailment stage and then be locked out of any further curtailment eligibility.
                                Loads that are locked will remain in the locked state indefinitely until the Load.locked attribute is reset to FALSE. The mechanism used to unlock the load is a local matter.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="status" type="LoadStatusType" minOccurs="0" maxOccurs="1">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the current status of the load. For non-curtailable loads, it provides the present communication status and reliability of the data.  For curtailable loads, it also defines if the load is eligible for curtailment or why it is ineligible for curtailment.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="upRamp" type="PowerRampSegmentType" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the increase in power over time when a load being partially or fully energized has a complex demand restoration profile. For each element of the Load.upRamp array, the upRamp[n].rate defines the amount of power increase and the upRamp[n].duration defines the length of time in seconds upon which the increase is in effect. If the upRamp[n].beginRamp attribute is defined for a ramp segment, this is the initial value of the ramp segment; if it is not present the initial value of the ramp equals the ending value of the previous ramp segment.
                                Although the upRamp attribute name implies that the rise is monotonically increasing, individual array elements may have slopes less than, greater than, or equal to 0.  However, the overall trend of the function shall be increasing.
                                The upRamp function shall measure the time from the load being fully de-energized until the power is completely restored as defined by Load.maximumDemand. If this attribute is not present, the power increase upon restoration shall be instantaneous.
                                When a curtailable load is partially curtailed (less than the maximumCurtailableDemand) and curtailment is reduced, the power will increase starting at n-th recoveryRamp of the sum from 0 to n of the upRamp[n].rate that is closest to the actualCurtailedDemand.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="input" type="ConnectionPoint" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="ComponentElement" type="ComponentElement"/>
    <xs:complexType name="ComponentElement" abstract="true">
        <xs:annotation>
            <xs:documentation>This class is an abstract class representing the top level class of one of the four FSGIM model components or a Collection of these top level classes. Note that the parts of a Collection instance inherit the tag attribute values of its parent collection ComponentElement instance.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="FSGIMIdentifiedObject">
                <xs:sequence>
                    <xs:element name="tags" type="Name" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>This attribute may contain a set of strings to be used at the configuration phase of installation such as "hallway", "3rd Floor", "Critical", ... These strings may be optionally qualified with a NameType and NameTypeAuthority.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="FSGIMIdentifiedObject" type="FSGIMIdentifiedObject"/>
    <xs:complexType name="FSGIMIdentifiedObject">
        <xs:annotation>
            <xs:documentation>A standard representation of the identifier used to distinguish key object instances in the FSGIM.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="mRID" type="GlobalID" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Master resource identifier issued by a model authority. The mRID is globally unique within an exchange context. This attribute redefines the mRID attribute of the NAESB IdentifiedObject to force the attribute to be of type GlobalId.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Any free text that names the object.  This attribute redefines the NAESB IdentifiedObject attribute to force the multiplicity to be 1.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="nameType" type="xs:string" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Name of the name type.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="nameTypeAuthority" type="xs:string" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Name of the name type authority.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>